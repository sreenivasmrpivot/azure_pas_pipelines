---
resources:
- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: configuration
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    paths: 
      - environments/((foundation))/config/*
      - environments/((foundation))/vars/*
    depth: 1

- name: state
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    depth: 1

- name: variable
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    paths: 
      - environments/((foundation))/vars/*
    depth: 1

- name: installation
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: installation/installation-(.*).zip

interpolate-creds: &interpolate-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    PREFIX: '/concourse/main'
    INTERPOLATION_PATHS: environments/((foundation))/config environments/((foundation))/env
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-creds

jobs:
  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
          - get: state
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip
      - task: delete-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/delete-installation.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml
      - task: delete-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/delete-vm.yml
        input_mapping:
          image: opsman-image
          state: state
          config: interpolated-creds
          vars: variable
        params:
          VARS_FILES: vars/environments/((foundation))/vars/opsman-vars.yml
          STATE_FILE: environments/((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: environments/((foundation))/config/opsman.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: state-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: environments/((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: state
              params:
                repository: state-commit
                merge: true