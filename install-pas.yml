
resources:

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: configuration
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    paths: [ "environments/((foundation))/config/*","environments/((foundation))/vars/*"]
    depth: 1

- name: state
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    depth: 1

- name: variable
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration-uri))
    branch: master
    submodules: all
    depth: 1

- name: installation
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: installation/installation-(.*).zip

# - name: healthwatch-product
#   type: s3
#   source:
#     access_key_id: ((s3_access_key_id))
#     bucket: ((s3_pivnet_products_bucket))
#     region_name: ((s3_region_name))
#     secret_access_key: ((s3_secret_access_key))
#     regexp: \[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal

# - name: healthwatch-stemcell
#   type: s3
#   source:
#     access_key_id: ((s3_access_key_id))
#     bucket: ((s3_pivnet_products_bucket))
#     region_name: ((s3_region_name))
#     secret_access_key: ((s3_secret_access_key))
#     regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: \[ops-manager,(.*)\].*.yml

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: \[elastic-runtime,(.*)\]cf-.*.pivotal

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_pivnet_products_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

# - name: pas-windows-product
#   type: s3
#   source:
#     access_key_id: ((s3_access_key_id))
#     bucket: ((s3_pivnet_products_bucket))
#     region_name: ((s3_region_name))
#     secret_access_key: ((s3_secret_access_key))
#     regexp: \[pas-windows,(.*)\]pas-windows-.*.pivotal

- name: daily-trigger
  type: time
  source:
    interval: 24h

- name: one-time-trigger
  type: time
  source:
    interval: 999999h


interpolate-creds: &interpolate-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    PREFIX: '/concourse/main'
    INTERPOLATION_PATHS: environments/((foundation))/config environments/((foundation))/env
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-creds


jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: one-time-trigger
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
          trigger: true 
        - get: state
      - task: interpolate-download-opsman-image-creds
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
          PREFIX: '/concourse/main'
          INTERPOLATION_PATHS: "download-product-configs"
          SKIP_MISSING: true
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: product-configs
      - task: download-opsman-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product-s3.yml
        params:
          CONFIG_FILE: download-product-configs/opsman.yml
        input_mapping:
          config: product-configs
        output_mapping:
          downloaded-product: opsman-image
      - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: state
          config: interpolated-creds
          vars: variable
        params:
          VARS_FILES: vars/environments/((foundation))/vars/opsman-vars.yml
          STATE_FILE: environments/((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: environments/((foundation))/config/opsman.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: state-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: environments/((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: state
              params:
                repository: state-commit
                merge: true
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: interpolated-creds
          config: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml
          AUTH_CONFIG_FILE: environments/((foundation))/config/auth.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: interpolated-creds
          env: interpolated-creds
          vars: variable
        params:
          VARS_FILES: vars/environments/((foundation))/vars/director-vars.yml
          ENV_FILE: environments/((foundation))/env/env.yml
          DIRECTOR_CONFIG_FILE: environments/((foundation))/config/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml

  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: daily-trigger
            trigger: true
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: one-time-trigger
            passed: [ install-opsman ]
          - get: platform-automation-image
            params:
              unpack: true
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-product
          - get: installation
            passed: [ export-installation ]
          - get: configuration
          - get: variable
          - get: state
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-product
          state: configuration
          config: interpolated-creds
          env: interpolated-creds
          vars: variable
        params:
          VARS_FILES: vars/environments/((foundation))/vars/opsman-vars.yml
          ENV_FILE: environments/((foundation))/env/env.yml
          OPSMAN_CONFIG_FILE: environments/((foundation))/config/opsman.yml
          STATE_FILE: environments/((foundation))/state/state.yml
        ensure: *make-state-commit
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml

  - name: upload-stemcells
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-stemcell
            trigger: true
          - get: configuration
          - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: upload-pas-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: interpolated-creds
          stemcell: pas-stemcell
        params:
          ENV_FILE: environments/((foundation))/env/env.yml

  - name: upload-and-stage-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            trigger: true
            passed: [ "upgrade-opsman" ]
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-product
          - get: configuration
          - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: pas-product
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml

  - name: configure-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: configure-pas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: interpolated-creds
          env: interpolated-creds
          vars: variable
        params:
          CONFIG_FILE: environments/((foundation))/config/pas.yml
          ENV_FILE: environments/((foundation))/env/env.yml
          VARS_FILES: vars/environments/((foundation))/vars/pas-vars.yml

  - name: apply-product-changes
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-pas
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: interpolate-creds
        <<: *interpolate-creds
      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: interpolated-creds
        params:
          ENV_FILE: environments/((foundation))/env/env.yml

